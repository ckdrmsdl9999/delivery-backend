name: deploy-delivery

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

#    env:
#      SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
#      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.h2.Driver
#      SPRING_DATASOURCE_USERNAME: sa
#      SPRING_DATASOURCE_PASSWORD:
#      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
#      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.H2Dialect
#      SPRING_JWT_SECRET: ${{ secrets.JWT_SECRET }}
#      SPRING_AI_API_KEY: ${{ secrets.AI_API_KEY }}

    steps:
      - name: checkout
        uses: actions/checkout@v4

#      - name: install PostgreSQL
#        run: sudo apt-get install -y postgresql-client

      - name: java 17 version setup
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'


#  echo "  application:" >> src/test/resources/application-test.yml
#echo "    name: delivery" >> src/test/resources/application-test.yml

#      - name: 테스트 yml 생성
#        run: |
#          mkdir -p src/test/resources/
#          echo "spring:" > src/test/resources/application-test.yml
#          echo "  datasource:" >> src/test/resources/application-test.yml
#          echo "    url: jdbc:h2:mem:testdb" >> src/test/resources/application-test.yml
#          echo "    driver-class-name: org.h2.Driver" >> src/test/resources/application-test.yml
#          echo "    username: sa" >> src/test/resources/application-test.yml
#          echo "    password: " >> src/test/resources/application-test.yml
#          echo "  jpa:" >> src/test/resources/application-test.yml
#          echo "    database-platform: org.hibernate.dialect.H2Dialect" >> src/test/resources/application-test.yml
#          echo "    hibernate:" >> src/test/resources/application-test.yml
#          echo "      ddl-auto: create" >> src/test/resources/application-test.yml
#          echo "  jwt:" >> src/test/resources/application-test.yml
#          echo "    secret: ${SPRING_JWT_SECRET}" >> src/test/resources/application-test.yml
#          echo "    accessTokenValidityInMilliseconds: 3600000" >> src/test/resources/application-test.yml
#          echo "    refreshTokenValidityInMilliseconds: 86400000" >> src/test/resources/application-test.yml
#          echo "  sql:" >> src/test/resources/application-test.yml
#          echo "    init:" >> src/test/resources/application-test.yml
#          echo "      mode: always" >> src/test/resources/application-test.yml
#          echo "ai:" >> src/test/resources/application-test.yml
#          echo "  apikey: ${SPRING_AI_API_KEY}" >> src/test/resources/application-test.yml
#          echo " test yml 생성 완료"

#      - name: Debug AI_API_KEY
#        run: |
#          echo "AI_API_KEY: ${{ secrets.AI_API_KEY }}"
#
#
#      - name: Verify application-test.yml contents
#        run: cat src/test/resources/application-test.yml


      - name: gradle 실행 권한 부여 및 빌드
        run: |
          chmod +x gradlew
          ./gradlew clean build

      - name: 도커 허브 로그인
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag 생성
        run: echo "TAG=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: 이미지 빌드
        run: |
          docker build --no-cache \
            --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --build-arg AI_API_KEY=${{ secrets.AI_API_KEY }} \
            -t leewon2/backend-image:${{ env.TAG }} .
          docker tag leewon2/backend-image:${{ env.TAG }} leewon2/backend-image:latest

      - name: 도커 허브에 새로운 이미지 push
        run: |
          docker push leewon2/backend-image:${{ env.TAG }}
          docker push leewon2/backend-image:latest

      - name: ssh 접속 후 배포
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/delivery
            
            rm -f .env
            touch .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "AI_API_KEY=${{ secrets.AI_API_KEY }}" >> .env
            
            docker pull leewon2/backend-image
            sudo ./switch_nginx.sh
            echo "배포 성공"





